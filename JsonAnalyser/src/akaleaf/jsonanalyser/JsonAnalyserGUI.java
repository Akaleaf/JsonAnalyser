/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package akaleaf.jsonanalyser;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import javax.swing.JFileChooser;

/**
 *
 * @author akaleaf <your.name at your.org>
 */
public class JsonAnalyserGUI extends javax.swing.JFrame {

    private  JFileChooser fileChooser = null;
    private File jsonFile;
    
    /**
     * Creates new form JsonAnalyserGUI
     */
    public JsonAnalyserGUI() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        panelChoose = new javax.swing.JPanel();
        labelChoose = new javax.swing.JLabel();
        textFieldChoose = new javax.swing.JTextField();
        buttonChoose = new javax.swing.JButton();
        labelResult1 = new javax.swing.JLabel();
        labelResult2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        labelChoose.setText("Choose .json file to check:");

        buttonChoose.setText("Choose...");
        buttonChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonChooseActionPerformed(evt);
            }
        });

        labelResult1.setText("Here will be result");

        javax.swing.GroupLayout panelChooseLayout = new javax.swing.GroupLayout(panelChoose);
        panelChoose.setLayout(panelChooseLayout);
        panelChooseLayout.setHorizontalGroup(
            panelChooseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelChooseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelChooseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelChoose)
                    .addComponent(labelResult1)
                    .addGroup(panelChooseLayout.createSequentialGroup()
                        .addComponent(textFieldChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonChoose))
                    .addComponent(labelResult2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelChooseLayout.setVerticalGroup(
            panelChooseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelChooseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelChoose)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelChooseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldChoose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonChoose))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelResult1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelResult2)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelChoose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelChoose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonChooseActionPerformed
        // Создание экземпляра JFileChooser
        fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Choose .json file to check");
        // Пользователь выбирает файл
        fileChooser.showOpenDialog(JsonAnalyserGUI.this);
        // Берём выбранный файл
        jsonFile = fileChooser.getSelectedFile();
        // Обновляем результат анализа json файла
        updateResult();
    }//GEN-LAST:event_buttonChooseActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // При активаии окна вызвать обновление результата анализа json файла
        updateResult();
    }//GEN-LAST:event_formWindowActivated

    // Обновление результатов анализа json файла
    private void updateResult() {
        // Если файл не задан, выйти из метода
        if (jsonFile == null) {
            return;
        }
        
        // Если файл json валидный
        if (isJsonValid(jsonFile)) {
            // Сказать, что json файл валидный
            labelResult1.setText("Valid:");
        } else {
            // Иначе сказать, что json файл невалидный
            labelResult1.setText("Not valid:");
        }
        // Сказать расположение и название файла
        labelResult2.setText("" + fileChooser.getSelectedFile());
    }
    
    // Метод для проверки json файла на валидность
    // Проверяет на:
    //{}"
    private boolean isJsonValid(File jsonFile) {
        
        BufferedReader bufferReader = null;
        try {
            // Прочитаем файл
            bufferReader = new BufferedReader(new FileReader(jsonFile));
            String line;
            String text = "";
            // Пройдёмся по всему файлу
            while ((line = bufferReader.readLine()) != null) {
                // Соберём весь файл в одну строку
                text += line;
            }
            
            // Уберём пробелы. Они нам ни к чему
            text = text.replaceAll("\\s+", "");
            
            // Сразу отсеять большинство файлов
            if (!isBracketsCountOk(text)) {
                return false;
            }
            
            // Отсеять половину файлов
            if (!isQuotesCountOk(text)) {
                return false;
            }
            
            // Пройдёмся по всей строке
            for (int i = 0; i < text.length(); i++) {
                // Если найден '{'
                if (text.charAt(i) == '{') {
                    // Если нет соответствующей закрывающей скобки
                    if (findIndexOfClosingBracket(text.substring(i + 1, text.length()), '{') == -1) {
                        // Вернуть негативный результат
                        return false;
                    }
                    // Начать обработку '{'
                    // Отправляем в метод весь остальной текст
                    if  (!processBrackets(text.substring(
                        i + 1,
                        i + findIndexOfClosingBracket(text.substring(i + 1, text.length()), '{')
                    ))) {
                        // Если результат обработки '{' отрицательный,
                        // вернуть негативный результат
                        return false;
                    }
                }
            }
        } catch (Exception e) {
            System.err.println("error");
        }
        
        // Если в процессе не выявлено структурных ошибок, вернуть положительный результат
        return true;
    }
    
    // Обработать скобку
    private boolean processBrackets(String text) {
        
        // Слежка за открытием и закрытием кавычек
        boolean quoteClosed = true;
        // Пройдём по принятому тексту
        for (int i = 0; i < text.length(); i++) {
            char textChar = text.charAt(i);
            switch (textChar) {
                case '"':
                    quoteClosed = !quoteClosed;
                    break;
                case ':':
                    
                    break;
                case ',':
                    
                    break;
                // Если нашлась ещё одна открывающая фигурная скобка
                case '{':
                    // Если не найдена закрывающая скобка
                    if (findIndexOfClosingBracket(text.substring(i + 1, text.length()), '{') == -1) {
                        // Верунть негативный результат
                        return false;
                    }
                    // Обработать '{'
                    return processBrackets(text.substring(
                        i + 1,
                        i + findIndexOfClosingBracket(text.substring(i + 1, text.length()), '{')
                    ));
                case '}':
                    
                    break;
                // Если нашлась ещё одна открывающая квадратная скобка
                case '[':
                    // Если не найдена кавычка
                    if (findIndexOfClosingBracket(text.substring(i + 1, text.length()), '[') == -1) {
                        // Верунть негативный результат
                        return false;
                    }
                    // Обработать '{'
                    return processBrackets(text.substring(
                        i + 1,
                        i + findIndexOfClosingBracket(text.substring(i + 1, text.length()), ']')
                    ));
                case ']':
                    
                    break;
                // Встретился посторонний символ
                default:
                    // Он за кавычками?
                    if (quoteClosed) {
                        // тогда возвратить негативный результат
                        return false;
                    }
            }
        }
        
        // Ошибок не выявлено? Возвращаем положительный результат
        return true;
    }
    
    // Метод для поиска индекса соответствующей закрывающей скобки
    private int findIndexOfClosingBracket(String text, char openBracket) {
        
        char closingBracket = 0;
        switch (openBracket) {
            case '{':
                closingBracket = '}';
            break;
            case '[':
                closingBracket = ']';
            break;
        }
        
        int i;
        int brackets = 0;
        for (i = 0; i < text.length(); i++) {
            if (text.charAt(i) == openBracket) {
                brackets++;
            }
            if (text.charAt(i) == closingBracket) {
                if (brackets == 0) {
                    return i + 1;
                }
                brackets--;
            }
        }
        
        // Не нашли?
        // Вернём невозможный индекс, как ошибку
        return -1;
    }
    
    // Метод смотрит равное ли количество открывающих и хакрывающих скобок
    private boolean isBracketsCountOk(String text) {
        int bracketsCount = 0;
        for (int i = 0; i < text.length(); i++) {
            switch (text.charAt(i)) {
                case '{':
                    bracketsCount++;
                    break;
                case '}':
                    bracketsCount--;
                    break;
                case '[':
                    bracketsCount++;
                    break;
                case ']':
                    bracketsCount--;
                    break;
                default:
                    break;
            }
        }
        return bracketsCount == 0;
    }
    
    // Метод смотрит чётное ли количество кавычек
    private boolean isQuotesCountOk(String text) {
        int quotesCount = 0;
        for (int i = 0; i < text.length(); i++) {
            switch (text.charAt(i)) {
                case '{':
                    quotesCount++;
                    break;
                case '}':
                    quotesCount--;
                    break;
                default:
                    break;
            }
        }
        return quotesCount == 0;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JsonAnalyserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JsonAnalyserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JsonAnalyserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JsonAnalyserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JsonAnalyserGUI().setVisible(true);
            }
        });
    }

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonChoose;
    private javax.swing.JLabel labelChoose;
    private javax.swing.JLabel labelResult1;
    private javax.swing.JLabel labelResult2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel panelChoose;
    private javax.swing.JTextField textFieldChoose;
    // End of variables declaration//GEN-END:variables
}
